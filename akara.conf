# -*- mode: python -*-

# This is the main Akara server configuration file. It contains
# settings for the server and for its extension modules.

# The configuration file is written in Python. Configuration data goes
# into class attributes. If the module is "A.B.C" then the
# configuration information should be in the class named "C". If there
# is a conflict then use the parameter "akara_name" to set the full
# module name.

# class C1:
#    akara_name = "akara.demo.C"
#    name = "this is for one module ending with C"
#
# class C2:
#    akara_name = "akara.example.C"
#    name = "this is for another C module"

# An extension module should get its configuration class using
#   akara.module_config(name)
# where "name" is the full module name (usually __name__).
# The name can be omitted in which case __name__ is used.

### Section 1: Global Akara Environment
#  The directives in this section affect the overall operation of
#  Akara, such as the number of concurrent requests it can handle and
#  where it should place its PID and log files.
#

class Akara:
    #  Listen: interface name (optional) and port to listen for HTTP requests
    Listen = 8872
    #  To specify the interface name use this format:
    #  Listen = "localhost:8880"

    # ServerRoot = os.path.join(sys.prefix, "share", "akara")

    # To simplify, set this to the location of akara.conf
    ConfigRoot = "."

    #  PidFile: Filename which holds the process id of a running Akara
    #  server. The file is created when Akara starts and removed when it
    #  exists. It contains a single line: the pid followed by a newline.
    #
    PidFile = "logs/akara.pid"

    #  ModuleDir: directory containing the Akara extension modules
    #  Akara loads all of the *.py files in that directory
    #
    ModuleDir = "modules"

    # ModuleCache: directory containing the module cache databases.
    # Akara only creates such databases if the akara.caching
    # feature is being used to cache GET requests
    ModuleCache = "caches"

    ####
    #  Different options controlling the number of pre-forked server
    #  process to run at any one time.
    #
    #  MaxServers: maximum number of servers to run at any one time
    #  (this is therefore the maximum number of simultaneous connections)
    MaxServers           = 10
    #
    #  A 'spare' server is one which is waiting to handle an HTTP request
    #  MinSpareServers: minimum number of spare servers
    MinSpareServers      =  1
    #  MaxSpareServers: maximum number of spare servers
    MaxSpareServers      =  2

    #  MaxRequestsPerServer: restart a server after this many requests
    MaxRequestsPerServer =   100


    #### Log configuration
    #  ErrorLog: The location of the error log file.
    #
    ErrorLog = "logs/error.log"

    #  AccessLog: The location of the access log file.
    #  Uses the Apache combined log format
    #
    AccessLog = "logs/access.log"

    #  LogLevel: Set the severity level for Akara logging messages.
    #  Messages below the given log level are not written. The levels are,
    #  from highest to lowest:
    #      CRITICAL, ERROR, WARN, INFO, DEBUG
    #  Also, WARNING is an alias for WARN
    #
    #LogLevel = "INFO"
    LogLevel = "DEBUG"

### Section 2: List of extension modules to install

# These are module names found on the Python path

MODULES = [
    "freemix_akara.contentdm",
    "freemix_akara.oai",
    "dplaingestion.oai",
    "zen.akamod.geocoding",
    "dplaingestion.akamod.enrich",
    "dplaingestion.akamod.enrich-subject",
    "dplaingestion.akamod.enrich-type",
    "dplaingestion.akamod.enrich-format",
    "dplaingestion.akamod.enrich-date",
    "dplaingestion.akamod.select-id",
    "dplaingestion.akamod.shred",
    "dplaingestion.akamod.geocode",
    "dplaingestion.akamod.oai-to-dpla",
    "dplaingestion.akamod.oai-set-name",
    "dplaingestion.akamod.dpla-list-records",
    "dplaingestion.akamod.dpla-list-sets",
    "dplaingestion.akamod.mdl-enrich-location",
    "dplaingestion.akamod.filter_empty_values",
    "dplaingestion.akamod.artstor_select_isshownat",
    "dplaingestion.akamod.artstor_identify_object",
    "dplaingestion.akamod.contentdm_identify_object",
    "dplaingestion.akamod.move_dates_to_temporal",
    "dplaingestion.akamod.enrich_location",
    "dplaingestion.akamod.lookup",
    "dplaingestion.akamod.kentucky_identify_object",
    "dplaingestion.akamod.georgia_identify_object",
    "dplaingestion.akamod.bhl_contributor_to_collection",
    "dplaingestion.akamod.copy_prop"
    ]

### Section 3: Other module configuration goes here

class geocoding:
    cache_max_age = 86400*7
    geocoder = 'http://purl.org/com/zepheira/services/geocoders/local-geonames'
    geonames_dbfile = Akara.ConfigRoot+'/caches/geonames.sqlite3'

class enrich:
    couch_database = 'http://camp.dpla.berkman.temphost.net:5972/dpla'
    couch_database_username = 'couchadmin'
    couch_database_password = 'couchM3'

# Another module which needs to access the couchdb database.
class dpla_thumbs(enrich):
    pass

class download_preview:
    thumbs_root_path = '/tmp/thumbs/'
    thumbs_root_url  = 'http://something/'
    # Only these MIME types are supported
    # The value is the extension which will be used for storing the
    # file on disk.
    mime_to_type = {
        'image/jpeg' : '.jpg',
        'image/gif'  : '.gif',
        'image/png'  : '.png',
    }

class lookup:
    # Key is passed in query param.
    # Value is name of the dictionary from lookup module.
    lookup_mapping = {
        'test': 'test_subst',
        'test2': 'test_2_subst'
    }

class identify_object:
    IGNORE = 0
    PENDING = 1

class contentdm_identify_object(identify_object):
    pass

class kentucky_identify_object(identify_object):
    pass

class artstor_identify_object(identify_object):
    pass
